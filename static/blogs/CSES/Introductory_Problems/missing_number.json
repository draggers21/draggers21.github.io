{"blog_content": "CSES or Code Submission Evaluation System <a href='https://cses.fi/' target='_blank'>(CSES Website)</a> is an online code evaluation system that has been used to organize several coding events in Finland. <a href='https://cses.fi/problemset/' target='_blank'>The CSES Problem Set</a> are a collection of algorithm based problems that aims to teach various segments of competitive programming such as dynamic programming, greedy algorithms and sorting algorithms etc. One can attempt the questions in various languages such as C++, Python, JAVA and even assembly. Current problem set has more than 300 problems one can solve.<br /><br />In this series we will look at the Introductory Problems of the CSES problem set and then will later move onto other segments of competitive programming.<br /><br />The second problem in the introductory problem set is the <a href='https://cses.fi/problemset/task/1083' target='_blank'>Missing Number</a> problem. The question is as follows - <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/CSES/Introductory_Problems/missing_number/missing_number_task.webp' alt='Task for missing number' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Task for the problem Missing Number.</figcaption></figure></div></div><br /><br />The first approach that came to my mind was to create an array of <strong>n</strong> elements and then check which number is missing from the said array, but this would be a lengthy and time consuming approach which will cause us to exceed either the time limit or the memory limit. Moments later a better approach came to my mind, that was to use the concept of <strong>sum of n terms of an Arithmetic Progression</strong>. The approach was to calculate the sum of n terms of an AP where the <strong>common difference is 1</strong> and <strong>initial element is 1</strong> and then calculate the sum of the given array, subtract those two sums and we can have the missing number, this approach is more economical wrt to time and space constraints. The flow chart for this logic is as follows - <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/CSES/Introductory_Problems/missing_number/missing_number_flow_chart.webp' alt='logic flowchart for the problem' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Logic flowchart for the problem.</figcaption></figure></div></div><br /><br />The solution for this in <strong>C++</strong> - <br /><br /><pre class='line-numbers' style='max-height: 500px;'><code class='language-cpp match-braces'>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long \n\nint main(){\n    ll n, sum_a=0;\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;n;i++){\n        int temp;\n        cin&gt;&gt;temp;\n        sum_a+=temp;\n    }\n    cout&lt;&lt;((2 + (n-1))*n)/2 - sum_a;\n    return 0;\n}\n</code></pre><br /><br />You can use <strong>g++</strong> to compile the above code segment, using the following command - <br /><br /><pre class='line-numbers' style='max-height: 500px;'><code class='language-bash match-braces'>g++ -o missing_number missing_number.cpp\n</code></pre><br /><br />Output of the code against the sample input - <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/CSES/Introductory_Problems/missing_number/missing_number_output_cpp.webp' alt='Output against the sample input using CPP.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Output against the sample input using CPP.</figcaption></figure></div></div><br /><br />Submission results of the C++ code is - <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/CSES/Introductory_Problems/missing_number/missing_number_cpp.webp' alt='Submission results of the C++ code' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Submission results of the C++ code.</figcaption></figure></div></div><br /><br />The solution for same problem in <strong>Python3</strong> - <br /><br /><pre class='line-numbers' style='max-height: 500px;'><code class='language-python match-braces'>n = int(input())\nprint(int(((2 + (n-1))*n)/2 - sum(map(int, input().split()))))\n</code></pre><br /><br />You can use the following command to run the above code - <br /><br /><pre class='line-numbers' style='max-height: 500px;'><code class='language-bash match-braces'>python3 missing_number.py\n</code></pre><br /><br />Output of the code against the sample input - <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/CSES/Introductory_Problems/missing_number/missing_number_output_python.webp' alt='Output against the sample input using python3.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Output against the sample input using python3.</figcaption></figure></div></div><br /><br />Submission results of the python code is -<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/CSES/Introductory_Problems/missing_number/missing_number_python.webp' alt='Submission results of the Python3 code' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Submission results of the Python3 code.</figcaption></figure></div></div>"}