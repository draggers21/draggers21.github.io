{"blog_content": "<a href='https://overthewire.org/wargames/leviathan/' target='_blank' rel='noopener'>Leviathan</a> is a war-game presented by <a href='https://overthewire.org/' target='_blank' rel='noopener'>OverTheWire.org</a> that tests players knowledge of linux commands and linux file system and some basic exploitation skills. In this writeup we will try and solve Leviathan Level 2 to get the key for Level 3.<br /><br />This one took quite a bit of time and research. But finally found a way to crack the level. The prompt for this level is - <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_1.webp' alt='Prompt for level 2' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Prompt for leviathan level2.</figcaption></figure></div></div><br /><br />Nothing as usual. Let's SSH onto the server using the username <strong>leviathan2</strong> and the password <strong>ougahZi8Ta</strong>, which we got after solving the previous challenge. <a href='view.html?id=891077dae1ae376f6f656f48e7da130bacd8e3b9c597e1df17fc189ca65ebae4' target='_blank' rel='noopener'>(Read OverTheWire: Leviathan: Solving Leviathan 1 -> Leviathan 2)</a><br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_2.webp' alt='SSHing into the server.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>SSHing into the server.</figcaption></figure></div></div><br /><br />Using commands to get some basic knowledge about the user, current working directory and the contents of the directory. The commands used are - <strong>whoami</strong>, <strong>pwd</strong>, <strong>ls -la</strong> respectively.<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_3.webp' alt='Gathering basic info about the system.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Gathering basic info about the system.</figcaption></figure></div></div><br /><br />Looks like there is an executable <strong>printfile</strong>, just like the last challenge. Let's try running the file. As per this output, it looks like the binary printfile takes an command line input of a file name. Let's create a temporary file in the <strong>/tmp/</strong> directory and add some random data to use this file with this binary. Use the following command to create a file and add data to it. <strong>touch /tmp/test.txt; echo 'This is a test' > /tmp/test.txt</strong>. Let's try running the binary again, but this time we will pass the file path as the command line input.<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_4.webp' alt='Running the binary' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Running a binary on a sample file.</figcaption></figure></div></div><br /><br />Looks like it prints the contents of the file that is passed to it as an input. Let's try fetching the password file for <strong>leviathan3</strong> now. The password files of all levels of Leviathan are stored in <strong>/etc/leviathan_pass/leviathanX</strong>, where X is the level number. Using the command - <strong>./printfile /etc/leviathan_pass/leviathan3</strong> to fetch the contents of the file.<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_5.webp' alt='Accessing the password file directly' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Accessing the password file directly.</figcaption></figure></div></div><br /><br />This gives us the output <strong>You can't have that file</strong>. Let's use <strong>ltrace</strong> to analyze the behaviour of the binary using the command <strong>ltrace ./printfile /etc/leviathan_pass/leviathan3</strong>.<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_6.webp' alt='ltrace output for the binary.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>ltrace output for the binary.</figcaption></figure></div></div><br /><br />Looks like the binary is using the <strong>access</strong> function defined in <strong>unistd.h</strong> as per it's linux man page <a href='https://linux.die.net/man/2/access' target='_blank' rel='noopener'>(Read access() manpage)</a>, this function checks whether the calling function can access the given filepath name. This is done by checking the calling process's real UID and GID. Since we do not have access to <strong>/etc/leviathan_pass/leviathan3</strong> file, it does not show us the contents of the file. Let's try again with the file that we initially created and let's check what else function does it call, using the command - <strong>ltrace ./printfile /tmp/test.txt</strong><br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_7.webp' alt='ltrace output for the binary when using a file we own.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>ltrace output for the binary when using a file we own.</figcaption></figure></div></div><br /><br />Here we see that the after checking the permission for the file, the control goes to a <strong>snprintf()</strong> function that is defined in the <strong>stdio.h</strong> header file. Unlike traditional <strong>printf</strong>, which prints a string to <strong>stdout</strong>, snprintf, prints <strong>'n' characters</strong> to the buffer specified. After that the command that is created using <strong>snprintf</strong>, it is passed onto the <strong>system()</strong> function, which essentially runs system commands. In this we can see that it is using <strong>/bin/cat</strong> binary to print the contents of the file that is given as an argument.<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_10.webp' alt='man page of cat' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>manual page entry for 'cat'.</figcaption></figure></div></div><br /><br />In this case we will have to exploit the usage of the <strong>cat</strong> binary, as per the man page of <strong>cat</strong>, usage of cat - <strong>cat OPTIONS FILES...</strong>, so in order to print more than one file to stdout, you can pass all the files names separated by space to print two different files. For eg. the command <strong>cat text1.txt text2.txt</strong> will print the contents of the file text1.txt and text2.txt to stdout. Now how this can be exploited is that while passing a file name to <strong>printfile</strong>, we will modify the name of the file in such a way that when the control reaches the <strong>system()</strong> function, the cat binary will think that the file name passed to it is the name of two different files, thus displaying the contents of both the files, but wait there's more, the file name we pass will reference the restricted resource, in this case <strong>/etc/leviathan_pass/leviathan3</strong> using <strong>symlinks</strong>, thus it will pass the initial <strong>access()</strong> check and will display the file it references.<br /><br />Now the execution, let's create a folder in <strong>/tmp/</strong> directory, let's say <strong>test</strong>, post that we will create a file named <strong>test\\ symlink</strong>, in bash in order to separate space in the filename from the command, we add <strong>\\</strong> to tell bash that it is with the filename, what this will do is that when printed out by <strong>snprintf()</strong>, in <strong>system()</strong>, it will look something like this <strong>system(\"/bin/cat /tmp/test/test symlink\")</strong> thus <strong>cat</strong> will try printing two files, named <strong>test</strong> and <strong>symlink</strong>, we are half way done now. <br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_8.webp' alt='Creating the exploit file' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Creating the exploit file.</figcaption></figure></div></div><br /><br />Now we will create a symlink between a file named <strong>test</strong> and <strong>/etc/leviathan_pass/leviathan3</strong> using the command - <strong>ls -s /etc/leviathan_pass/leviathan3 /tmp/test/test</strong>. This will create a symlink between a file named <strong>test</strong> and <strong>/etc/leviathan_pass/leviathan3</strong>, this means whenever any command is run of <strong>test</strong>, linux kernel will redirect it to the file it references, that means if I use <strong>cat</strong> on <strong>test</strong>, it will print the contents of the file it references. Now coming back to the challenge, now you can see when <strong>printfile</strong> is passed the file <strong>/tmp/test/test\\ symlink</strong>, <strong>cat</strong> will try and print the <strong>test</strong>, but since it's a symlink to leviathan3 password file, it should print the contents of the password file, which we weren't able to do because <strong>access()</strong> said we do not have the permission to access the file.<br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_9.webp' alt='Creating the symlink' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Creating the symlink file.</figcaption></figure></div></div><br /><br /><div class='row'><div class='col' style='text-align: center;'><figure class='figure' style='align-items: center;'><img src='static/images/OverTheWire-WriteUps/Leviathan/leviathan2to3/leviathan2to3_11.webp' alt='Running the binary with the exploit file.' onclick='magnify(this.src)' class='figure-img img-fluid blog-image'><figcaption class='figure-caption blog-fig-caption'>Running the binary with the exploit file.</figcaption></figure></div></div><br /><br />Voila we have the password for leviathan3.<br /><br /><strong>Password for leviathan3 is: Ahdiemoo1j</strong><div class='row'><div class='col'></div><div class='col'></div></div>"}